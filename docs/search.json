[
  {
    "objectID": "posts/2025-02-20-git-and-github/index.html",
    "href": "posts/2025-02-20-git-and-github/index.html",
    "title": "Why I love Git and GitHub",
    "section": "",
    "text": "I have taught multiple workshops to help researchers get started with version control and GitHub, because I think it is an incredibly valuable tool. Like most of my workshops, this is tailored to the group, very hands-on and with very few slides. I also think there are amazing blogs out there with good information already, so creating yet another one felt redundant. At the same time, I find a lot of the resources have many details and take a long time. So, I wrote yet another blog on Git and Github, but I tried to keep it simple and straightforward. I provide links for more exhaustive resources. But, think of this one as taking the tiny step to get started.\nNote: This tutorial has been developed with beginners in mind, and has largely been taught to folks in the biological sciences with zero to no previous exposure to git and GitHub."
  },
  {
    "objectID": "posts/2025-02-20-git-and-github/index.html#for-the-sake-of-open-science-and-reproducibility",
    "href": "posts/2025-02-20-git-and-github/index.html#for-the-sake-of-open-science-and-reproducibility",
    "title": "Why I love Git and GitHub",
    "section": "For the sake of open science and reproducibility",
    "text": "For the sake of open science and reproducibility\nAt least for academia, I have noticed people use GitHub as a code storage place - essentially, you write a paper, have some code associated with it, upload the code and use that link for the Data availability section in the manuscript. I don‚Äôt love this, but if it means the code is available, I‚Äôll take it. Would it be nice to have the history associated with the work? Sure‚Ä¶\nFor long-term code storage (you publish a paper and share the code/data for it) I think Zenodo is a great option! There are other options too, like Open Science Framework and both of these integrate with GitHub. So, you could start your project with Git/GitHub, track all the changes, and then when finished, release it as a version to Zenodo. This is what I did for my dissertation, with the added benefit that it allows people to cite the code directly.\nSo, why do I love Git and GitHub? It is a relatively simple step to keeping us honest. I push for reproducibility in science and open source work, so using version control is one aspect of this. I also think this is an great resource and learning tool for young scientists! Personally, I have learned much more from people‚Äôs repositories of their analysis, than from papers that just tell you what they did, but don‚Äôt show you how. Also, I think it is important to have tools that allow for real-time collaboration, where we can not only work together, but also openly discuss changes and keep track of why decisions were made. Git allows for the tracking of changes, but GitHub adds the web interface for issues and conversations surrounding the code."
  },
  {
    "objectID": "posts/2025-02-20-git-and-github/index.html#branches-and-pull-requests",
    "href": "posts/2025-02-20-git-and-github/index.html#branches-and-pull-requests",
    "title": "Why I love Git and GitHub",
    "section": "Branches and pull requests",
    "text": "Branches and pull requests\nWhen you first start using Git and Github, thinking of branches might feel a little intimidating, and honestly, you can get away with no using them at first. But branches become essential once you get a little adventurous and want to try things that could break your code. They are also incredibly useful for working with others, incorporating changes in a hopefully more structured way and keeping track of everyone‚Äôs contributions to the project.\nEssentially:\n\nCreate Branch to make a change.\nCommit changes to the new branch.\nOpen Pull request to merge the changes to main branch.\nOptional and recommended: delete branch\n\nAlso known as a feature branch workflow"
  },
  {
    "objectID": "posts/2025-02-20-git-and-github/index.html#your-turn",
    "href": "posts/2025-02-20-git-and-github/index.html#your-turn",
    "title": "Why I love Git and GitHub",
    "section": "Your turn!",
    "text": "Your turn!\nYou can find additional resources and guides for this directly on the github-practice repo.\n\nCreate a new branch called yourname-branch.  \nMake a change in this branch and save the change as a commit (Hint: green button that says Commit changes‚Ä¶)  When you save or commit your changes, it is recommended that you add a little message to say what you did. \nOpen pull request to suggest your changes be included into the main branch. This is basically sending me a message - ‚ÄúHey Javi, I made some changes, can you pull them from my branch?‚Äù.  \n\nOne you create the pull request, I would get a notification saying someone has made changes. Then, I can approve those changes, and merge them to the main branch. If I want to, then I can delete that branch that proposed the change.\n # You did it!\nThere you have it! Your first interaction with GitHub ü§© and since you have [Registered for a GitHub account](https://happygitwithr.com/github-acct), chapter 4 in the HappyGit with R book.\nWhat do you think your next step should be? Perhaps you could get started by linking your local R/RStudio to your brand new GitHub account! You could continue with chapter 5 in the Happy Git with R book or follow along this tutorial in R for the rest of us\nSomething to keep in mind‚Ä¶ This website and blog post are created with Quarto and edited from RStudio, and linked to my Github! If you are familiar with R markdown, then think of Quarto as the next generation, which allows you to work not only with R, but also python and julia. It is an open source publishing system (It helps you create pretty documents using code and text), and you can create anything from a website to a power point presentation, and even a pre-formatted scientific manuscript.\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "posts/2025-02-24-on-packages/index.html",
    "href": "posts/2025-02-24-on-packages/index.html",
    "title": "R packages for chaos control",
    "section": "",
    "text": "Let‚Äôs talk about R packages. You know them, you love them, and you probably have way too many installed. You are familiar with install.packages() and have heard of CRAN. But, what are packages? To me, they are just a way of organizing your stuff, and by stuff I mean your scripts, data, documentation, and even reports. When we talk about packages, most people think of those downloaded from CRAN, and you might have seen some from GitHub. However, I think packages don‚Äôt get enough credit, and don‚Äôt get used as often in simpler scenarios. I first learned about packages in 2018, and gave my first workshop shortly after with RLadies GNV (you can check the slide deck here, although it might be a tiny bit outdated).\nBundling your code in an R package provides consistency, a structure recognized and followed by several folks in the community, and gently pushes you to write documentation. Whether the documentation is any good or not, I think that is up to you. Here are a few examples where I think packages are useful:\nIn general, you will notice that the key component here is the sharing part. Packages are a good way to share code. I think this goes hand in hand with version control and GitHub, but if tackling that also feels like too much, you are not alone! You can build packages without hosting them on GitHub, but I strongly recommend you don‚Äôt delay this for too long."
  },
  {
    "objectID": "posts/2025-02-24-on-packages/index.html#find-yourself-a-function",
    "href": "posts/2025-02-24-on-packages/index.html#find-yourself-a-function",
    "title": "R packages for chaos control",
    "section": "Find yourself a function:",
    "text": "Find yourself a function:\nGot a function you use a lot? Bring it on‚Ä¶\n\n# Scaling function - I use this a lot in models. We want to 'scale' the covariates\n\nscale2 &lt;- function(x) {\n   mx &lt;- x - mean(x)\n   sdx &lt;- sd(x) \n   \n   if (sdx == 0) {\n      out &lt;- mx\n   } else {\n      out &lt;- mx/sdx\n   } \n   return(out)\n}"
  },
  {
    "objectID": "posts/2025-02-24-on-packages/index.html#introducing-devtools",
    "href": "posts/2025-02-24-on-packages/index.html#introducing-devtools",
    "title": "R packages for chaos control",
    "section": "Introducing devtools",
    "text": "Introducing devtools\nMy first introduction to building R packages was with writing R extensions, if that was also your experience, I‚Äôm sorry. Introducing devtools: Tools to Make Developing R packages Easier , that is literally their description and [here](https://devtools.r-lib.org/index.html) is the package website.\nInstall the devtools package and load it:\n\ninstall.packages(\"devtools\")\nlibrary(devtools)"
  },
  {
    "objectID": "posts/2025-02-24-on-packages/index.html#create-your-package",
    "href": "posts/2025-02-24-on-packages/index.html#create-your-package",
    "title": "R packages for chaos control",
    "section": "Create your package",
    "text": "Create your package\nYou will notice in the package chatter, that devtools loads another package called usethis, which has several of the functions we will use today. The tough part: think of a package name. Once you have your name, create the package:\n\nusethis::create_package(\"the/path/to/where/you/want/to/save/and/the/package/name\")\n\nusethis is very chatty, so don‚Äôt get scared by the output. Your package will open in a new session.\n\n\n\nConsole output after creating package.\n\n\nYou will notice it opens in a new session, and you can check by looking at the project icon at the top right of RStudio.\n\n\n\n\n\n\nBasic package structure\nYou will also notice that your package has been built with a few default files:\n\n\n\n\n\nThe .gitignore and .Rbuildignore are hidden files that RStudio and Git can use when building the package (things to ignore, and for now, we are ignoring them). But we will check out the other ones:\n\nNAMESPACE: don‚Äôt edit this one. It basically is your package‚Äôs rulebook and get‚Äôs filled in automatically when we use roxygen2 and write documentation. This file lists the functions in your package that are available to the user.\nDESCRIPTION: your package‚Äôs resume, the information of what it does, who made it, and very important, what other packages is your package using, these are called dependencies. You can open and explore this file now. You could change your package‚Äôs title, description, authors, etc. I don‚Äôt go into too much detail on this here, but Ch9 in the R packages book will give you all the info you need.\nR folder - this is where you will find all your functions.\n\nThat is the basic structure of a package. Now, let‚Äôs fill it in."
  },
  {
    "objectID": "posts/2025-02-24-on-packages/index.html#adding-your-function",
    "href": "posts/2025-02-24-on-packages/index.html#adding-your-function",
    "title": "R packages for chaos control",
    "section": "Adding your function",
    "text": "Adding your function\nRemember the scaling function? we are going to add it to the package, and document it!\n\nusethis::use_r(\"scale2\")\n\nThis will automatically open the scale2.R script (it either creates it or just opens it if it existed). Now, copy your code to it. Save it and run a check(). This function checks that the package is working and follows the structure.\n\n\n\n\n\nOh interesting! what is this?? We get a warning a note. Well, you see, my scaling function is using two other functions:\n\nThe mean function is from base R and so we don‚Äôt get any warnings here.\nBut the sd function is from the package stats.\n\nThis tell me, we need to import these, and actually, you will see that the error gives us a suggestion importFrom(\"stats\", \"sd\"). First, edit the code to make sure we use the package::function notation in the right spot.\n\nscale2 &lt;- function(x) {\n   mx &lt;- x - mean(x)\n   sdx &lt;- stats::sd(x) \n   \n   if (sdx == 0) {\n      out &lt;- mx\n   } else {\n      out &lt;- mx/sdx\n   } \n   return(out)\n}\n\nThen, to add dependencies we continue to use the usethis package. You will notice this adds the package to the imports section from the DESCRIPTION.\n\nusethis::use_package(\"stats\")\n\n\nWhen you open the DESCRIPTION, notice the imports section. Also note that I have already edited some of the information here such as the title, description, and author.\n\n\n\n\n\nIf we run the check again, you will notice the note is gone but we still get a warning. why?\n\n\n\n\n\nA license! our package doesn‚Äôt have a license. The warning also gives us a hint, so for now we don‚Äôt delve into the details of which license to pick, but we will use a pretty common one, the MIT license:\n\nusethis::use_mit_license()\n\nThis function creates a new document, a LICENSE document, with standard information for licensing. This becomes extra important for the sharing purposes we discussed at the beginning. As an individual, probably and MIT license is fine. If you are getting to the point of publishing packages for your company, you might want to check with them on specifics."
  },
  {
    "objectID": "posts/2023-02-13-on-dispersal-kernels/index.html",
    "href": "posts/2023-02-13-on-dispersal-kernels/index.html",
    "title": "Vector-mediated dispersal kernels",
    "section": "",
    "text": "I wrote this post to help a friend a couple of years ago (og post), and I am finally getting to organize this into my brand new website! ü§©\nAt the time, Sarah was working on her dissertation with salamanders and the fungal pathogen Batrachochytrium salamandrivorans (Bsal). Specifically, we talked about generating dispersal kernels for the pathogen, thinking of humans walking on trails and carrying the pathogen on their boots. Sarah did some really fun experiments getting boots in the mud and taking steps, to quantify the amount of pathogen that would get onto the boots, and then dispersed by a person walking.\nWhen you have available data, the usual goal is to fit an equation (or model) that describes the probability of dispersal as a function of distance. In this case, we are thinking of human mediated dispersal (HMD) of a specific fungal pathogen. The experiments were used to calculate the amount of pathogen that gets dispersed in hiking books after being exposed to an initial inoculum. The starting inoculum had a concentration of 10^5 zoospores in water. Boots step on the inoculated water source, and walk for s meters, where s=1,2,...,5. In this example we were trying to quantify the dispersal kernel for human mediated spore dispersal.\nThe main question here is over what range of distances can fungal spores be dispersed by humans on their boots? And what function would describe the relationship between concentration of those spores and distance walked.\nFrom the initial meeting with Sarah, I understood that we start with 10^5 zoospores in a water vessel, and essentially estimate a pick up rate. This means that data points at distance zero (d=0) are a proportion of the initial starter. From here, we would like to estimate the proportion of zoospores left on the shoe vector, and thus the proportion of zoospores transferred to the soil as distance from the starter increases.\nA common approach to this is to use an exponential model with:\nf(d) = a \\text{e}^{-bd}\nwhere the proportion of zoospores left on the boot (f(d)) is a function of the initial number of zoospores at the starting point (in this case the pick up rate as a proportion of the total at distance d=0). We assume that zoospores are transferred from the boot to the soil at a constant rate b, as shown in the equation above.\nFor algebra reasons:\n\ny = a \\text{e}^{-bx} \\\\\nlog(y) = log(a \\cdot \\text{e}^{-bx}) \\\\\nlog(y) = log(a) + log(\\text{e}^{-bx}) \\\\\nlog(y) = A - bx\n\nTo fit this model in R, you can just fit a linear model, where your response variable is log(y), with an intercept A, and a slope -b.\nAs an example, let‚Äôs generate some random data from the perspective of this experiment. The starting point:\n\nlibrary(tidyverse)\n\n\n# From what I remember these seemed to be the average values\n# for the number of zoospores\n# recovered from the boot\ny_mean &lt;- c(160, 100, 60, 20, 5, 2)\ny_sd &lt;- c(0, 30, 10, 5, 5, 5)\n\n# And these are the number of data points for each of the distances\nd &lt;- c(0,1,1,1,2,2,2,2,3,3,3,4,4,5,5,5)\n\nset.seed(86923)\n#simulate some data\ny &lt;- NULL\nfor(i in 1:length(d)){\n  val_d &lt;- d[i]\n  gen_y &lt;- rnorm(1, mean = y_mean[val_d+1], sd = y_sd[val_d+1])\n  y[i] &lt;- gen_y\n}\n\nplot(d, y)\n\n\n\n\nWe have some simulated data now, and now will fit an exponential function to it:\n\n# Save my simulated data as an object\nmy_df &lt;- data.frame(d = d, y = y)\n\n# The model looks at the proportion of zoospores that remain on the boot\npick_up &lt;- my_df$y[which(my_df$d==0)] # number of zoospores picked up from source\n\nmy_df |&gt; \n  mutate(prop_y = y/pick_up) -&gt; my_df\n\n# plot(my_df$d, my_df$prop_y)\n\n# Fit the function as a linear model:\n\nm1 &lt;- lm(log(prop_y) ~ d, data = my_df)\nbroom::tidy(m1)\n\n# A tibble: 2 √ó 5\n  term        estimate std.error statistic      p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;        &lt;dbl&gt;\n1 (Intercept)    0.326    0.213       1.53 0.149       \n2 d             -0.774    0.0690    -11.2  0.0000000221\n\n\nWe can look at the results from this model and see that the intercept (a) is giving us the starting value for d=0, for the proportion of zoospores remaining on the boot. Considering this is in a log scale, we transform back to get the actual proportion:\n\nexp(m1$coefficients[1])\n\n(Intercept) \n   1.385001 \n\n\nBut we also have to remember that this is a proportion of zoospores remaining given the initial pickup rate. So to get an actual number of zoospores at a certain distance, in this case d=0, we have to multiply by the initial pick up rate and we get\n\nexp(m1$coefficients[1]) * pick_up\n\n(Intercept) \n   221.6001 \n\n\nas the number of zoospores picked up by the boot at the source. This model assumes a constant decay rate -0.7742497, which corresponds to b.\nWe can use these coefficients to predict the proportion of zoospores remaining on the boot at any given distance d. For example:\n\n# predictions vector\nd_pred &lt;- seq(from = 2, to = 10, by = 0.5) # in meters\n\n# Use the model to generate predictions for these new distance values\ny_log_pred &lt;- predict(m1, list(d = d_pred))\n# transform back to get proportions\ny_pred_prop &lt;- exp(y_log_pred)\n\n# transform to number of zoospores using the initial pick up rate\ny_pred&lt;- y_pred_prop * pick_up\n\n# Get one data frame to visualize\npred_df &lt;- data.frame(d = d_pred, y = y_pred, prop_y = y_pred_prop, type = \"pred\")\n\n\n#| warning: false\n\nmy_df |&gt; \n  mutate(type = \"og\") |&gt; \n  bind_rows(pred_df) -&gt; combined_df\n\ncombined_df |&gt; \n  ggplot(aes(x = d, y = y, color = type)) +\n   geom_point(alpha = 0.7) +\n   theme_classic() +\n  labs(y = \"Zoospores on boot\", x = \"Distance in meters\") -&gt; nzoos_fig\n\n\ncombined_df |&gt; \n  ggplot(aes(x = d, y = prop_y, color = type)) +\n  geom_point(alpha = 0.7) +\n  theme_classic() +\n  labs(y = \"Proportion of zoospores remaining on boot\",\n       x = \"Distance in meters\",\n       color = \"\") -&gt; prop_fig\n\nmy_legend &lt;- cowplot::get_legend(prop_fig)\n\nWarning in get_plot_component(plot, \"guide-box\"): Multiple components found;\nreturning the first one. To return all, use `return_all = TRUE`.\n\ncowplot::plot_grid(\n   nzoos_fig + theme(legend.position = \"none\"),\n   NULL,\n   prop_fig + theme(legend.position = \"none\"),\n   my_legend,\n   ncol = 4,\n   rel_widths = c(1, 0.1, 1, 0.2)\n)\n\n\n\n\nWe can also fit this using nonlinear least squares with the same starting dataset:\n\nslice_sample(my_df, n = 6)\n\n  d          y     prop_y\n1 3  22.117988 0.13823743\n2 3  24.029967 0.15018730\n3 2  68.879803 0.43049877\n4 5   7.803433 0.04877146\n5 1  68.505725 0.42816078\n6 0 160.000000 1.00000000\n\n\n\nm2 &lt;- nls(prop_y ~ I(a * exp(b * d)), data = my_df, start=list(a=1, b=0))\n\nWe can also do a prediction for the same predicted distance values as before:\n\nplot(d_pred, predict(m2, list(d = d_pred)), col = \"darkgreen\", type = \"l\")\n\n\n\n\n\nbroom::tidy(m2)\n\n# A tibble: 2 √ó 5\n  term  estimate std.error statistic  p.value\n  &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 a        1.05     0.0690      15.2 4.30e-10\n2 b       -0.567    0.0514     -11.0 2.71e- 8\n\n\nAnd calculate some goodness of fit values:\n\nrss.p &lt;- sum(residuals(m2)^2)  # Residual sum of squares\ntss &lt;- sum((my_df$prop_y - mean(my_df$prop_y))^2) # Total sum of squares\n1 - (rss.p/tss)  # R-squared measure\n\n[1] 0.9321556\n\n\nThis R-squared measure tells you how much of the variation in the data is explained by your independent variable in the regression model. In our case, it tells us 93.2% of the variation in the proportion of zoospores remaining on the boot is explained by the distance variable.\nTo wrap up, if we consider the model:\n\ny = a\\text{e}^{-bx}\n where y is the proportion of zoospores that remain on the boot and x is the distance in meters from the source of the pathogen, then a tells us the starting number of zoospores picked up by the boot at the source, and b tells us the rate at which zoospores are transferred from the boot to the soil.\nIf we use the second model‚Äôs values, then we can ask the question, what proportion of zoospores would remain on the hiker‚Äôs boot after walking for 20 meters?\n\na &lt;- summary(m2)$coefficients[1]\nb &lt;- summary(m2)$coefficients[2]\n\nget_prop_y &lt;- function(x, a, b){\n  a*exp(b*x)\n}\n\n\nget_prop_y(20, a, b)\n\n[1] 1.243764e-05\n\n\nthis should be the same result using the predict() function:\n\npredict(m2, list(d = 20))\n\n[1] 1.243764e-05\n\n\n\n\n\nCitationBibTeX citation:@online{rudolph2023,\n  author = {Rudolph, Francisca Javiera},\n  title = {Vector-Mediated Dispersal Kernels},\n  date = {2023-02-13},\n  url = {https://javirudolph.github.io/posts/2023-02-13-on-dispersal-kernels/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRudolph, Francisca Javiera. 2023. ‚ÄúVector-Mediated Dispersal\nKernels.‚Äù February 13, 2023. https://javirudolph.github.io/posts/2023-02-13-on-dispersal-kernels/."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "javirudolph",
    "section": "",
    "text": "Hi there! My name is Francisca Javiera (Javi) Rudolph and this is my mini website. I primarily use this one to organize my GitHub work and share things I learn that apply to R programming or data science. For details on my background and research in quantitative ecology please visit my other site at javirudolph.com/research"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "about",
    "section": "",
    "text": "This is a landing page as I build this site. The original website is here.\nI am a Latin American scientist, born in Chile and raised in Ecuador. As a child, I always imagined I would become a veterinarian, but as I was pursuing that career in college I discovered infectious disease ecology. My passion for numbers and the quantitative aspect of nature drew me towards a PhD in Zoology at the University of Florida working with Jose Miguel Ponciano and Bette Loiselle. During my dissertation I focused on my statistics training and worked to understand variation between individuals and how it affects our understanding of population and ecosystem level patterns. I am a fan of statistics of extremes, R is my happy language, and I truly enjoy teaching and empowering others to use quantitative tools in their work. I am also a mom of three kiddos and an awesome dog. You can find me on GitHub, and LinkedIn. A list of my publications is on GoogleScholar."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "posts",
    "section": "",
    "text": "R packages for chaos control\n\n\n\nR packages\n\n\nreproducibility\n\n\n\nSharing your code and keeping it organized\n\n\n\nFrancisca Javiera Rudolph\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nWhy I love Git and GitHub\n\n\n\nGit\n\n\nGitHub\n\n\nversion control\n\n\nreproducibility\n\n\n\nA short guide to getting started\n\n\n\nFrancisca Javiera Rudolph\n\n\nFeb 20, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nVector-mediated dispersal kernels\n\n\n\nDispersal\n\n\npathogens\n\n\n\nThinking of fungal pathogens moved around by humans in nature\n\n\n\nFrancisca Javiera Rudolph\n\n\nFeb 13, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  }
]